// RUN: @caesar @file

domain List {
/**
  *   Define datatype List
  *   List is null or cons(head: Int, tail: List)
  **/
  func null(): List
  func cons(head: Int, tail: List): List

/**
  *   Get value of the list
  *   @param    ls: List
  *   @returns  Value of the list
  **/
  func get_value(ls: List): Int
  axiom g_v forall h: Int, t: List. get_value(cons(h, t)) == h

/**
  *   Get tail of the list
  *   @param    ls: List
  *   @returns  Get tail of the list
  **/
  func get_tail(ls: List): List
  axiom g_t forall h: Int, t: List. get_tail(cons(h, t)) == t

/**
  *   Define list is null
  *   @param    ls: List
  *   @returns  Boolean if list is null
  **/
  func is_null(ls: List) : Bool
  axiom i_n forall ls: List. is_null(ls) == (ls == null())
  
/**
  *   Define list contains elements
  *   @param    ls: List
  *   @returns  Boolean if list contains elements
  **/  
  func is_list(ls: List): Bool
  axiom i_l forall ls: List, h: Int, t: List. ((get_tail(ls) == t) && (get_value(ls) == h)) ==> (is_list(ls) == ( ls == (cons(h, t))))

/**
  *   List can only be null or a List
  **/  
  axiom either_list_or_null forall ls: List. (is_null(ls) || is_list(ls))

/**
  *   Define length of the List contains elements
  *   @param    ls: List
  *   @returns  The length of the List
  **/  
  func length(ls: List): UInt
  axiom l_n forall ls: List. is_null(ls) ==> (length(ls) == 0)
  axiom l_r forall ls: List. is_list(ls) ==> (length(ls) ==  1 + length(get_tail(ls)))

/**
  *   Get the element in index i of a List 
  *   @param    ls: List
  *   @param    i:  Index
  *   @returns  The element of the List in index i
  **/  
  func select(ls: List, i: UInt): Int
  axiom s_n forall ls: List, i: UInt. is_null(ls) ==> (select(ls, i) == 0)
  axiom s_l_v forall ls: List, i: UInt. (is_list(ls) && (i == 0)) ==> (select(ls, i) == get_value(ls))
  axiom s_l_r forall ls: List, h: Int, t: List, i: UInt. (is_list(ls) && (0 < i) && (ls == cons(h, t))) ==> (select(ls, i) == select(t, i-1))
}

/***
Instead of writing proc of Max, just use ite function
proc Max(h: Int, g: Int) -> (res: Int)
  pre ? (true)
  post ? (res == ite(h < g, g, h) ) 
{
  assume ? (h == (7) && g == 5)
    res = ite(h <= g, g, h) 
  assert ? (res == 7)
}
//ite(a <= b, b, a)
//ite(ln <= length(), ..., ...)
***/

/***
debugging to test if the axiom works correctly
//assume ? (false) if it doesnt verify, it means is_null is false
proc ListTest(ls: List) -> ()
{
  assert ? (is_null(ls) || is_list(ls))
}

proc ListTestTwo(ls: List) -> ()
{
  assert ? ((length(ls) == 0) ==> (ls == null()))
}

proc GetListTail(ls: List) -> (res: List)
{
  var h: Int = get_value(ls)
  var t : List = get_tail(ls)
  res = t
  assert ? (res == get_tail(ls))
}

proc LenNil(ls: List) -> ()
  pre ? (length(ls) == 0)
  post ? (ls == null())
{
  if (ls == null()){
  }
  else {
    assert ? (length(ls) == 1 + (length(get_tail(ls))))
  }
}

proc ListNil(ls: List) -> ()
  pre ? (length(ls) == 0)
  post ? (is_null(ls))
  {
    if (ls == null()){
    }
    else {
      assert ? (length(ls) == 1 + (length(get_tail(ls))))
    }
}

proc LenList(ls: List) -> ()
  pre ? (0 < length(ls))
  post ? (is_list(ls))
{
  if (is_list(ls)){
    assert ? (length(ls) == 1 + (length(get_tail(ls))))
  }
  else {
    assert ? (is_null(ls))
  }
}
***/

/**
  *   Proof of the extensionality of two Lists
  *
  *   @param    ls: A datatype List
  *   @param    ts: A datatype List
  *   @ensures  The Lists ls == ts by verifying extensionatity
  *
  **/
proc Extensionality(ls: List, ts: List) -> ()
  pre ? (
    (length(ls) == length(ts)) && 
    (forall i: UInt. (i < length(ls)) ==> (select(ls, i) == select(ts, i)))
    )
  post ? (ls == ts)
{
 if is_null(ls) {
  assert ? (length(ts) == 0)
  assert ? (length(ls) == length(ts))
  assert ? (ts == null())
  assert ? (ls == ts)
 } else {
    if is_list(ls){
      if is_list(ts){
      var h : Int = get_value(ls)
      var t : List = get_tail(ls)
      var g : Int = get_value(ts)
      var u : List = get_tail(ts)

      assert ? (ls == cons(h, t))
      assert ? (h == select(ls, 0))
      assert ? (select(ls, 0) == select(ts, 0))
      assert ? (select(ts, 0) == g)
      assert ? (h == g)
      assert ? (cons(h, t) == cons(g, t))     
      assert ? (forall j: UInt. (j < length(t)) ==> 
      ((select(t, j) == select(ls, j+1)) &&
      (select(ls, j+1) == select(ts, j+1)) && 
      (select(ts, j+1) == select(u, j)) && 
      (select(t, j) == select(u, j))
      ))
      Extensionality(t, u)
      assert ? (cons(g, t) == cons(g, u))
      assert ? (cons(g, u) == ts)
      assert ? (ls == ts)
      } else {}
    } else{}
  }
}

/**
  *   The proc to ensure left-pad
  *
  *   @param  str:    A datatype List
  *   @param  ln:     The desired length of the return value
  *   @param  c:      The added pad
  *   @returns  res:  The return List that has correct left-pad in desired length
  *   
  *   note:   Instead using the while loop use recursion to add pads on the left
  *           The annotations are analogous as the those used in the sequence
  **/
proc LeftPad(str: List, ln: UInt, c: Int) -> (res : List)
  pre ? (0 <= length(str))
  post ? (
    (length(res) == ite(ln < length(str), length(str), ln)) && 
    (forall i: UInt. (i < ln-length(str)) ==> (select(res, i) == c)) && 
    (forall j: UInt. ((ite(0 < ln-length(str), ln-length(str), 0) <= j) && (j < length(res))) ==> 
    (select(res, j) == select(str, j- ite(0 < ln-length(str),ln-length(str), 0))))   
  )
{
  if (ln <= length(str)) {
    res = str
  } else{
    if (length(str) <= ln) 
    {
      res = LeftPad(cons(c, str), ln, c)
    } else {}
  } 
}

proc Main () -> ()
{
  var ls : List = cons(0, cons(0, cons(0, cons(1, cons(3, null())))))
  var res: List = LeftPad(cons(1, cons(3, null())), 5, 0)
  Extensionality(ls, res)
  assert ? (ls == res)
}

proc xx() -> ()
{
  //never verifies
  assert 0
}


